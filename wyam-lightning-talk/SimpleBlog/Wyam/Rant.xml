<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rant</name>
    </assembly>
    <members>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.ExpressionGroup">
            <summary>
            Read actions for groups (operations in parentheses)
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.VariableValue">
            <summary>
            Read actions for the value of a variable
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.FunctionBody">
            <summary>
            Read actions for a function body.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.ExpressionGroupNoList">
            <summary>
            An expression group, except it won't allow REAArgumentSeperators
            (For if statements and things)
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.ExpressionBlock">
            <summary>
            Expression block
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.KeyValueObject">
            <summary>
            JSON-like object
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.KeyValueObjectValue">
            <summary>
            Read a value in an object
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.BracketValue">
            <summary>
            Read the value in a bracket value access
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.List">
            <summary>
            A list is expected.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantExpressionCompiler.ExpressionReadType.InvertValue">
            <summary>
            A boolean value to invert is expected.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.Sequence">
            <summary>
            Reads a list of items and returns an RASequence.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.Block">
            <summary>
            Reads a list of items and returns an RABlock.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.FuncArgs">
            <summary>
            Reads a list of arguments and returns an RAFunction.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.Query">
            <summary>
            Reads a query and returns a RAQuery
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.QueryCarrier">
            <summary>
            Reads a query carrier
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.ReplacerArgs">
            <summary>
            Reads the arguments needed by a replacer and return an RAReplacer.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.SubroutineArgs">
            <summary>
            Reads the arguments needed by a subroutine.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.SubroutineBody">
            <summary>
            Reads the body of a subroutine.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.RantCompiler.ReadType.BlockWeight">
            <summary>
            Reads a block weight.
            </summary>
        </member>
        <member name="M:Rant.Engine.Compiler.RantLexer.GenerateTokens(System.String,Rant.Stringes.Stringe)">
            <summary>
            Generates beautiful tokens.
            </summary>
            <param name="name">The source name of the input.</param>
            <param name="input">The input string to tokenize.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.Compiler.R">
            <summary>
            Contains all the token identifiers for the Rant lexer.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Text">
            <summary>
            Regular text with no special function.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.EscapeSequence">
            <summary>
            A format string used to output a reserved or random character.
            Used by: Plaintext, arguments
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.LeftSquare">
            <summary>
            [
            <para>
            Used by: Tags (opening)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.RightSquare">
            <summary>
            ]
            <para>
            Used by: Tags (closure)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.LeftCurly">
            <summary>
            {
            <para>
            Used by: Blocks (opening)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.RightCurly">
            <summary>
            }
            <para>
            Used by: Blocks (closure)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.LeftAngle">
            <summary>
            &lt;
            <para>
            Used by: Queries (opening)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.RightAngle">
            <summary>
            &gt;
            <para>
            Used by: Queries (closure)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.LeftParen">
            <summary>
            (
            <para>
            Used by: Arithmetic (opening)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.RightParen">
            <summary>
            )
            <para>
            Used by: Arithmetic (closure)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Pipe">
            <summary>
            |
            <para>
            Used by: Blocks (item separator)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Colon">
            <summary>
            :
            <para>
            Used by: Tags (follows name)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Semicolon">
            <summary>
            ;
            <para>
            Used by: Tags (argument separator)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.DoubleColon">
            <summary>
            ::
            <para>
            Used by: Queries (carrier operator)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.At">
            <summary>
            @
            <para>
            Used by: Tags (constant arg notation), Arithmetic (statement modifier)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Question">
            <summary>
            ?
            <para>
            Used by: Tags (metapatterns), Queries (whitelist regex)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.ForwardSlash">
            <summary>
            /
            <para>
            Used by: Queries (regex filters)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Exclamation">
            <summary>
            !
            <para>
            Used by: Queries ('not' class constraint modifier)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Dollar">
            <summary>
            $
            <para>
            Used by: Queries ('only' modifier)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Hyphen">
            <summary>
            -
            <para>
            Used by: Queries (class constraint)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Comma">
            <summary>
            ,
            <para>
            Used by: Queries (subtype prefix)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Without">
            <summary>
            ?!
            <para>
            Used by: Queries (blacklist regex)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Regex">
            <summary>
            Javascript-style regular expression.
            <para>
            Used by: Queries (blacklist/whitelist)
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Ignore">
            <summary>
            Comments, whitespace, etc.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.ConstantLiteral">
            <summary>
            " ... "
            Used by: Tags
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Whitespace">
            <summary>
            Used by: Tags
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Equal">
            <summary>
            =
            <para>
            Used by: Carriers
            </para> 
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Ampersand">
            <summary>
            &amp;
            <para>
            Used by: Carriers
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Percent">
            <summary>
            %
            <para>
            Used by: Lists
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Caret">
            <summary>
            ^
            <para>
            Used by: Lists
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Plus">
            <summary>
            +
            <para>
            Used by: Lists
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Asterisk">
            <summary>
            *
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Weight">
            <summary>
            *123:
            <para>
            Used by: Blocks
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Backtick">
            <summary>
            `
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.RangeLiteral">
            <summary>
            (a - b)
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Number">
            <summary>
            Any decimal number.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Var">
            <summary>
            var keyword
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Subtype">
            <summary>
            .
            <para>
            Used by queries to denote subtypes.
            </para>
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.EOF">
            <summary>
            End of file.
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Tilde">
            <summary>
            Tilde (~)
            </summary>
        </member>
        <member name="F:Rant.Engine.Compiler.R.Undefined">
            <summary>
            Undefined (???)
            </summary>
        </member>
        <member name="T:Rant.Engine.Constructs.AttribPersistence">
            <summary>
            Defines persistence modes for block attributes.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.Off">
            <summary>
            The next block consumes attributes immediately.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.Outer">
            <summary>
            The next block consumes attributes and restores them when finished.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.OuterShared">
            <summary>
            The next block uses but does not consume attributes.
            They are inherited by and restored at the end of each child block.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.Inner">
            <summary>
            The current attributes are inherited by all blocks inside the current block.
            They are consumed at the end of the block.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.InnerShared">
            <summary>
            The current attributes are inherited by all blocks inside the current block, as well as their children.
            They are consumed at the end of the block.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.ReadOnly">
            <summary>
            Disable changes to the current block attributes until the persistence mode is changed.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.Once">
            <summary>
            Attributes will persist over the next block, but any block after or inside it will consume them.
            </summary>
        </member>
        <member name="F:Rant.Engine.Constructs.AttribPersistence.On">
            <summary>
            The next block uses but does not consume attributes. This also affects child blocks.
            </summary>
        </member>
        <member name="T:Rant.Engine.Constructs.BlockState">
            <summary>
            Supplies state information about an active block, such as the iteration, item count, and current index.
            </summary>
        </member>
        <member name="M:Rant.Engine.Constructs.BlockAttribs.NextIndex(System.Int32,Rant.RNG)">
            <summary>
            Calculates the index of the next block item to execute.
            </summary>
            <param name="blockItemCount">The number of items in the block.</param>
            <param name="rng">The random number generator to use with index calculation.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.Metadata.IRantFunction">
            <summary>
            Provides access to metadata for a Rant function overload.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantFunction.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantFunction.Description">
            <summary>
            Gets the description for the function overload.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantFunction.HasParamArray">
            <summary>
            Indicates whether the last parameter accepts multiple values.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantFunction.ParamCount">
            <summary>
            Gets the number of parameters accepted by the function overload.
            </summary>
        </member>
        <member name="M:Rant.Engine.Metadata.IRantFunction.GetParameters">
            <summary>
            Enumerates the parameters for the function overload.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.Metadata.IRantFunctionGroup">
            <summary>
            Provides access to metadata for a group of overloads for a specific Rant function.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantFunctionGroup.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantFunctionGroup.Overloads">
            <summary>
            Gets the available overloads for the function.
            </summary>
        </member>
        <member name="T:Rant.Engine.Metadata.IRantModeValue">
            <summary>
            Provides information on Rant's mode values, like number formats and synchronizer types.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantModeValue.Name">
            <summary>
            Gets the name of the value.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantModeValue.Description">
            <summary>
            Gets the description for the value.
            </summary>
        </member>
        <member name="T:Rant.Engine.Metadata.IRantParameter">
            <summary>
            Provides access to metadata for a Rant function parameter.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantParameter.RantType">
            <summary>
            Gets the data type accepted by the parameter.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantParameter.IsParams">
            <summary>
            Indicates whether the parameter accepts multiple values.
            </summary>
        </member>
        <member name="P:Rant.Engine.Metadata.IRantParameter.Description">
            <summary>
            Gets the description for the parameter.
            </summary>
        </member>
        <member name="M:Rant.Engine.Metadata.IRantParameter.GetEnumValues">
            <summary>
            Enumerates all possible values for flag and mode parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.Metadata.RantDescriptionAttribute">
            <summary>
            Used for annotating Rant functions and their parameters with descriptions that can be used to generate documentation.
            </summary>
        </member>
        <member name="T:Rant.Engine.Metadata.RantFunctionAttribute">
            <summary>
            Indicates to the Rant engine that a method should be registered as a Rant function.
            </summary>
        </member>
        <member name="T:Rant.Engine.Syntax.RABlock">
            <summary>
            Represents a block construct, which provides multiple options to the interpreter for the next sequence, one of which is chosen.
            </summary>
        </member>
        <member name="T:Rant.Engine.Syntax.RantAction">
            <summary>
            Represents an Abstract Syntax Tree (AST) node for a Rant pattern. This is the base class for all Rant actions.
            </summary>
        </member>
        <member name="M:Rant.Engine.Syntax.RantAction.Run(Rant.Engine.Sandbox)">
            <summary>
            Performs the operations defined in the action, given a specific sandbox to operate upon.
            </summary>
            <param name="sb">The sandbox on which to operate.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.Syntax.RAReplacer">
            <summary>
            Replaces text in a pattern output according to a regular expression and evaluator pattern.
            </summary>
        </member>
        <member name="T:Rant.Engine.Syntax.RASequence">
            <summary>
            Performs a sequence of actions.
            </summary>
        </member>
        <member name="T:Rant.Engine.Syntax.RAText">
            <summary>
            Prints a string constant to the output.
            </summary>
        </member>
        <member name="T:Rant.Engine.Delegates.Witchcraft">
            <summary>
            Allows creation of Rant function delegates from reflected methods that can be invoked using a series of boxed arguments.
            </summary>
        </member>
        <member name="T:Rant.Engine.RantParameterType">
            <summary>
            Defines parameter types for Rant functions.
            </summary>
        </member>
        <member name="F:Rant.Engine.RantParameterType.String">
            <summary>
            Parameter is a static string.
            </summary>
        </member>
        <member name="F:Rant.Engine.RantParameterType.Pattern">
            <summary>
            Parameter is a lazily evaluated pattern.
            </summary>
        </member>
        <member name="F:Rant.Engine.RantParameterType.Number">
            <summary>
            Parameter is numeric.
            </summary>
        </member>
        <member name="F:Rant.Engine.RantParameterType.Mode">
            <summary>
            Parameter describes a mode, which is one of a specific set of allowed values.
            </summary>
        </member>
        <member name="F:Rant.Engine.RantParameterType.Flags">
            <summary>
            Parameter uses combinable flags.
            </summary>
        </member>
        <member name="F:Rant.Engine.RantParameterType.RantObject">
            <summary>
            Parameter is a RantObject.
            </summary>
        </member>
        <member name="T:Rant.Engine.RantFunctionInfo">
            <summary>
            Contains information for associating a delegate with a Rant function.
            </summary>
        </member>
        <member name="T:Rant.Engine.Sandbox">
            <summary>
            Represents a Rant interpreter instance that produces a single output.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.Engine">
            <summary>
            Gets the engine instance to which the sandbox is bound.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.MainOutput">
            <summary>
            Gets the main output channel stack.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.CurrentOutput">
            <summary>
            Gets the current output channel stack.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.RNG">
            <summary>
            Gets the random number generator in use by the interpreter.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.CurrentBlockAttribs">
            <summary>
            Gets the currently set block attributes. 
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.Format">
            <summary>
            Gets the format used by the interpreter.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.Objects">
            <summary>
            Gest the object stack used by the interpreter.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.Blocks">
            <summary>
            Gets the block state stack.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.RegexMatches">
            <summary>
            Gets the replacer match stack. The topmost item is the current match for the current replacer.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.QueryState">
            <summary>
            Gets the current query state.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.Pattern">
            <summary>
            Gets the current RantPattern.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.SyncManager">
            <summary>
            Gets the synchronizer manager instance for the current Sandbox.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.CurrentAction">
            <summary>
            Gets the current RantAction being executed.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.LastTimeout">
            <summary>
            Gets the last used timeout.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.FlagConditionExpectedResult">
            <summary>
            Gets or sets the expected result for the current flag condition.
            </summary>
        </member>
        <member name="P:Rant.Engine.Sandbox.ConditionFlags">
            <summary>
            Gets a collection of the flags currently being used for the flag condition.
            </summary>
        </member>
        <member name="M:Rant.Engine.Sandbox.Print(System.Object)">
            <summary>
            Prints the specified value to the output channel stack.
            </summary>
            <param name="obj">The value to print.</param>
        </member>
        <member name="M:Rant.Engine.Sandbox.NextAttribs(Rant.Engine.Syntax.RABlock)">
            <summary>
            Dequeues the current block attribute set and returns it, queuing a new attribute set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.ObjectModel.ObjectTable">
            <summary>
            Stores global and local variables for a single engine instance.
            </summary>
        </member>
        <member name="T:Rant.Engine.ObjectModel.RantObject">
            <summary>
            Represents a Rant variable.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObject.No">
            <summary>
            No
            </summary>
        </member>
        <member name="P:Rant.Engine.ObjectModel.RantObject.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:Rant.Engine.ObjectModel.RantObject.Value">
            <summary>
            The value of the object.
            </summary>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.#ctor">
            <summary>
            Creates a No object.
            </summary>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.#ctor(System.Collections.Generic.List{Rant.Engine.ObjectModel.RantObject})">
            <summary>
            Creates a new RantObject instance with a list value.
            </summary>
            <param name="list">The list to assign to the object.</param>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.#ctor(System.Boolean)">
            <summary>
            Creates a new RantObject instance with a boolean value.
            </summary>
            <param name="boolean">The boolean value to assign to the object.</param>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.#ctor(System.String)">
            <summary>
            Creates a new RantObject instance with a string value.
            </summary>
            <param name="str">The string to assign to the object.</param>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.#ctor(System.Double)">
            <summary>
            Creates a new RantObject instance with a decimal number value.
            </summary>
            <param name="num">The number to assign to the object.</param>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.#ctor(System.Object)">
            <summary>
            Creates a new RantObject instance from the specified object.
            </summary>
            <param name="obj">The value to assign to the object.</param>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.ConvertTo(Rant.Engine.ObjectModel.RantObjectType)">
            <summary>
            Converts the current object to a RantObject of the specified type and returns it.
            </summary>
            <param name="type">The object type to convert to.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.Clone">
            <summary>
            Returns another RantObject instance with the exact same value as the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.op_Addition(Rant.Engine.ObjectModel.RantObject,Rant.Engine.ObjectModel.RantObject)">
            <summary>
            Returns the sum of two RantObjects.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.op_Subtraction(Rant.Engine.ObjectModel.RantObject,Rant.Engine.ObjectModel.RantObject)">
            <summary>
            Subtracts a RantObject from another.
            </summary>
            <param name="a">The object to subtract from.</param>
            <param name="b">The object to subtract.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.op_Multiply(Rant.Engine.ObjectModel.RantObject,Rant.Engine.ObjectModel.RantObject)">
            <summary>
            Returns the product of two RantObjects.
            </summary>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.op_Division(Rant.Engine.ObjectModel.RantObject,Rant.Engine.ObjectModel.RantObject)">
            <summary>
            Divides one RantObject by another.
            </summary>
            <param name="a">The object to divide.</param>
            <param name="b">The object to divide by.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Engine.ObjectModel.RantObject.ToString">
            <summary>
            Returns a string representation of the current RantObject.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.ObjectModel.ObjectStack">
            <summary>
            Stores local variables for a VM instance.
            </summary>
        </member>
        <member name="T:Rant.Engine.ObjectModel.RantObjectType">
            <summary>
            Defines object types used by Rant.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.Number">
            <summary>
            Represents a decimal number.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.String">
            <summary>
            Represents a series of Unicode characters.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.Pattern">
            <summary>
            Represents a compiled Rant pattern.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.Boolean">
            <summary>
            Represents a boolean value.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.List">
            <summary>
            Represents a resizable set of values.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.Action">
            <summary>
            Represents a VM action.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.No">
            <summary>
            Represents a lack of a value.
            </summary>
        </member>
        <member name="F:Rant.Engine.ObjectModel.RantObjectType.Undefined">
            <summary>
            Represents a lack of any variable at all.
            </summary>
        </member>
        <member name="T:Rant.Engine.Channel">
            <summary>
            Stores output from a pattern channel.
            </summary>
        </member>
        <member name="P:Rant.Engine.Channel.Name">
            <summary>
            The name of the channel.
            </summary>
        </member>
        <member name="P:Rant.Engine.Channel.Visiblity">
            <summary>
            The visibility of the channel.
            </summary>
        </member>
        <member name="M:Rant.Engine.Channel.Write(System.String)">
            <summary>
            Writes a value to the buffer.
            </summary>
            <param name="value">The value to print.</param>
        </member>
        <member name="M:Rant.Engine.Channel.Write(System.Object)">
            <summary>
            Writes a value to the buffer and applies the current number formatting if the value is a numeric type.
            </summary>
            <param name="value">The value to print.</param>
        </member>
        <member name="P:Rant.Engine.Channel.Length">
            <summary>
            The number of characters in the output.
            </summary>
        </member>
        <member name="P:Rant.Engine.Channel.Value">
            <summary>
            The output string stored in the channel.
            </summary>
        </member>
        <member name="M:Rant.Engine.Channel.ToString">
            <summary>
            Returns a string that identifies the channel by name and visibility.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Engine.ChannelVisibility">
            <summary>
            Provides visibility settings for output channels.
            </summary>
        </member>
        <member name="F:Rant.Engine.ChannelVisibility.Public">
            <summary>
            Channel outputs to itself and 'main'.
            </summary>
        </member>
        <member name="F:Rant.Engine.ChannelVisibility.Private">
            <summary>
            Channel outputs only to itself.
            </summary>
        </member>
        <member name="F:Rant.Engine.ChannelVisibility.Internal">
            <summary>
            Channel outputs only to itself and any parent channels also set to Internal.
            </summary>
        </member>
        <member name="T:Rant.IO.Compression.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:Rant.IO.Compression.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:Rant.IO.Compression.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:Rant.IO.Compression.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,Rant.IO.Compression.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:Rant.IO.Compression.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:Rant.IO.Compression.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Rant.IO.Compression.CoderPropID.PosStateBits" -->
        <!-- Badly formed XML comment ignored for member "F:Rant.IO.Compression.CoderPropID.LitContextBits" -->
        <!-- Badly formed XML comment ignored for member "F:Rant.IO.Compression.CoderPropID.LitPosBits" -->
        <member name="F:Rant.IO.Compression.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:Rant.IO.Compression.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:Rant.IO.BitField">
            <summary>
            Represents a bit field of arbitrary length.
            </summary>
        </member>
        <member name="M:Rant.IO.BitField.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the Rant.IO.BitField class with the specified number of bits.
            </summary>
            <param name="bits">The number of bits in the bit field. This value must be a multiple of 8.</param>
        </member>
        <member name="M:Rant.IO.BitField.FromValue``1(``0)">
            <summary>
            Creates a BitField object from the specified data.
            </summary>
            <typeparam name="T">The type of data to pass.</typeparam>
            <param name="value">The data to pass to the BitField.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.IO.BitField.Item(System.Int32)">
            <summary>
            Accesses the bit at the specified index in the bit field.
            </summary>
            <param name="i">The index of the bit to access.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.IO.BitField.Bits">
            <summary>
            The number of bits in the BitField.
            </summary>
        </member>
        <member name="P:Rant.IO.BitField.Bytes">
            <summary>
            The number of bytes in the BitField.
            </summary>
        </member>
        <member name="M:Rant.IO.BitField.UnsetAll">
            <summary>
            Unsets all the flags in the bitfield.
            </summary>
        </member>
        <member name="M:Rant.IO.BitField.SetAll">
            <summary>
            Sets all the flags in the bitfield.
            </summary>
        </member>
        <member name="M:Rant.IO.BitField.GetSetCount">
            <summary>
            Returns the number of set bits.
            </summary>
            <returns>The number of set bits.</returns>
        </member>
        <member name="M:Rant.IO.BitField.GetUnsetCount">
            <summary>
            Returns the number of unset bits.
            </summary>
            <returns>The number of unset bits.</returns>
        </member>
        <member name="M:Rant.IO.BitField.Invert">
            <summary>
            Inverts the flags in the bit field.
            </summary>
        </member>
        <member name="M:Rant.IO.BitField.FromBytes(System.Byte[])">
            <summary>
            Creates a new BitField from the specified array of bytes.
            </summary>
            <param name="data">The array of bytes to create the BitField from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.BitField.GetBytes">
            <summary>
            Returns the BitField as an array of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.IO.EasyReader">
            <summary>
            Provides comprehensive binary data reading functionality including support for reading arrays and enumeration members.
            </summary>
        </member>
        <member name="M:Rant.IO.EasyReader.#ctor(System.IO.Stream,Rant.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from the specified stream.
            </summary>
            <param name="stream">The stream from which to read.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="M:Rant.IO.EasyReader.#ctor(System.IO.Stream,System.Boolean,Rant.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from the specified stream.
            </summary>
            <param name="stream">The stream from which to read.</param>
            <param name="leaveOpen">Specifies whether or not to leave the stream open after the reader is disposed.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="M:Rant.IO.EasyReader.#ctor(System.String,System.IO.FileMode,System.Int32,Rant.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from the specified file path.
            </summary>
            <param name="path">The path to the file to read.</param>
            <param name="mode">Speficies how the operating system should open the file.</param>
            <param name="startIndex">The index at which to start reading.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="M:Rant.IO.EasyReader.#ctor(System.Byte[],System.Int32,Rant.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyReader class from a byte array.
            </summary>
            <param name="data">The byte array to read from.</param>
            <param name="startIndex">The index at which to start reading.</param>
            <param name="defaultEndianness">The endianness of the data to be read.</param>
        </member>
        <member name="P:Rant.IO.EasyReader.Endianness">
            <summary>
            Gets or sets the endianness in which data is read by the stream.
            </summary>
        </member>
        <member name="P:Rant.IO.EasyReader.EndOfStream">
            <summary>
            Returns true if the stream has reached its end.
            </summary>
        </member>
        <member name="P:Rant.IO.EasyReader.Remaining">
            <summary>
            The amount of bytes that are remaining to be read.
            </summary>
        </member>
        <member name="P:Rant.IO.EasyReader.Length">
            <summary>
            The length of the stream in bytes.
            </summary>
        </member>
        <member name="P:Rant.IO.EasyReader.BaseStream">
            <summary>
            The underlying stream for this instance.
            </summary>
        </member>
        <member name="M:Rant.IO.EasyReader.Peek">
            <summary>
            Returns the next available byte but does not consume it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadByte">
            <summary>
            Reads a single byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadByte(System.Byte@)">
            <summary>
            Reads a single byte.
            </summary>
            <param name="value">The byte that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadBytes(System.Int32)">
            <summary>
            Reads an array of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadBytes(System.Int32,System.Byte[]@)">
            <summary>
            Reads an array of bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="value">The bytes that were read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadAllBytes">
            <summary>
            Reads all bytes from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadAllBytes(System.Byte[]@)">
            <summary>
            Reads all bytes from the stream.
            </summary>
            <param name="value">The bytes from the stream.</param>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadSByte">
            <summary>
            Reads a signed byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadSByte(System.SByte@)">
            <summary>
            Reads a signed byte.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadChar">
            <summary>
            Reads a Unicode character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadChar(System.Char@)">
            <summary>
            Reads a Unicode character.
            </summary>
            <param name="value">The character that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadBoolean">
            <summary>
            Reads a 1-byte boolean value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadBoolean(System.Boolean@)">
            <summary>
            Reads a 1-byte boolean value.
            </summary>
            <param name="value">The boolean value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadUInt16(System.UInt16@)">
            <summary>
            Reads a 16-bit unsigned integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadInt16">
            <summary>
            Reads a 16-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadUInt32(System.UInt32@)">
            <summary>
            Reads a 32-bit unsigned integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadInt32">
            <summary>
            Reads a 32-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadInt32(System.Int32@)">
            <summary>
            Reads a 32-bit signed integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadUInt64(System.UInt64@)">
            <summary>
            Reads a 64-bit unsigned integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadInt64">
            <summary>
            Reads a 64-bit signed integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadInt64(System.Int64@)">
            <summary>
            Reads a 64-bit signed integer.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadSingle">
            <summary>
            Reads a single-precision floating point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadSingle(System.Single@)">
            <summary>
            Reads a single-precision floating point number.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadDouble">
            <summary>
            Reads a double-precision floating-point number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadDouble(System.Double@)">
            <summary>
            Reads a double-precision floating-point number.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadDecimal">
            <summary>
            Reads a 128-bit decimal number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadDecimal(System.Decimal@)">
            <summary>
            Reads a 128-bit decimal number.
            </summary>
            <param name="value">The value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadString">
            <summary>
            Reads a Unicode string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadString(System.String@)">
            <summary>
            Reads a Unicode string.
            </summary>
            <param name="value">The string that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadString(System.Text.Encoding)">
            <summary>
            Reads a string encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the string to be read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadString(System.Text.Encoding,System.String@)">
            <summary>
            Reads a string encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the string to be read.</param>
            <param name="value">The string that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadStringArray">
            <summary>
            Reads an array of Unicode strings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadStringArray(System.String[]@)">
            <summary>
            Reads an array of Unicode strings.
            </summary>
            <param name="value">The array of strings that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadStringArray(System.Text.Encoding)">
            <summary>
            Reads a string array encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the strings to be read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadStringArray(System.Text.Encoding,System.String[]@)">
            <summary>
            Reads a string array encoded in the specified encoding.
            </summary>
            <param name="encoding">The encoding of the strings to be read.</param>
            <param name="value">The array of strings that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadArray``1(System.Boolean)">
            <summary>
            Reads an array of the specified value type.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="use64bit">Indicates to the reader that the array length is 64-bit rather than 32-bit.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadArray``1(``0[]@,System.Boolean)">
            <summary>
            Reads an array of the specified value type.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="value">The array that was read.</param>
            <param name="use64bit">Indicates to the reader that the array length is 64-bit rather than 32-bit.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadArray``1(System.Int32)">
            <summary>
            Reads an array of the specified type and item count.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="length">The length of the array.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadArray``1(System.Int32,``0[]@)">
            <summary>
            Reads an array of the specified type and item count.
            </summary>
            <typeparam name="T">The type stored in the array.</typeparam>
            <param name="length">The length of the array.</param>
            <param name="value">The array that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadDictionary``2">
            <summary>
            Reads a dictionary of the specified key and value types.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadDictionary``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            Reads a dictionary of the specified key and value types.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <param name="value">The dictionary that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadEnum``1">
            <summary>
            Reads an enumeration member.
            </summary>
            <typeparam name="TEnum">The enumeration type to read.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadEnum``1(``0@)">
            <summary>
            Reads an enumeration member.
            </summary>
            <typeparam name="TEnum">The enumeration type to read.</typeparam>
            <param name="value">The enumeration member that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadStruct``1(System.Boolean)">
            <summary>
            Reads a struct of the specified type.
            </summary>
            <typeparam name="TStruct">The struct to read.</typeparam>
            <param name="convertEndian"></param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadStruct``1(``0@,System.Boolean)">
            <summary>
            Reads a struct of the specified type.
            </summary>
            <typeparam name="TStruct">The struct to read.</typeparam>
            <param name="convertEndian">Specifies if struct members marked with the [Endianness(Endian)] attribute should have their endianness converted as necessary.</param>
            <param name="value">The struct that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadNullable``1">
            <summary>
            Reads a nullable value.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadNullable``1(System.Nullable{``0}@)">
            <summary>
            Reads a nullable value.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="value">The nullable value that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadBitField(System.Int32)">
            <summary>
            Reads a bit field from the stream.
            </summary>
            <param name="sizeInBytes">The size of the bit field in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.ReadBitField(System.Int32,Rant.IO.BitField@)">
            <summary>
            Reads a bit field from the stream.
            </summary>
            <param name="sizeInBytes">The size of the bit field in bytes.</param>
            <param name="value">The bit field that was read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyReader.Close">
            <summary>
            Closes the reader and the underlying stream.
            </summary>
        </member>
        <member name="M:Rant.IO.EasyReader.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the current instance of the Rant.IO.EasyReader class.
            </summary>
        </member>
        <member name="T:Rant.IO.EasyWriter">
            <summary>
            Provides comprehensive binary writing functionality including support for writing arrays and enumeration members.
            </summary>
        </member>
        <member name="M:Rant.IO.EasyWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the Rant.IO.EasyWriter class from the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.#ctor(System.IO.Stream,Rant.IO.Endian,System.Boolean)">
            <summary>
            Creates a new instance of the Rant.IO.EasyWriter class from the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="endianness">The endianness in which to write data.</param>
            <param name="leaveOpen">Specifies whether or not to leave the stream open after the writer is disposed.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.#ctor(System.String,System.IO.FileMode,Rant.IO.Endian)">
            <summary>
            Creates a new instance of the Rant.IO.EasyWriter class from the specified file path and mode.
            </summary>
            <param name="path">The path to the file to write.</param>
            <param name="endianness">The endianness in which to write data.</param>
            <param name="mode">Specifies how the operating system should open the file.</param>
        </member>
        <member name="P:Rant.IO.EasyWriter.BaseStream">
            <summary>
            The underlying stream for this instance.
            </summary>
        </member>
        <member name="P:Rant.IO.EasyWriter.Endianness">
            <summary>
            Gets or sets the endianness in which data is written.
            </summary>
        </member>
        <member name="P:Rant.IO.EasyWriter.Position">
            <summary>
            The current writing position of the stream.
            </summary>
        </member>
        <member name="P:Rant.IO.EasyWriter.Length">
            <summary>
            The current length of the stream.
            </summary>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.Byte)">
            <summary>
            Writes a byte to the stream.
            </summary>
            <param name="value">The byte to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes an series of bytes to the stream.
            </summary>
            <param name="value">The byte array to write.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.SByte)">
            <summary>
            Writes a signed byte to the stream.
            </summary>
            <param name="value">The signed byte to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer to the stream.
            </summary>
            <param name="value">The 16-bit unsigned integer to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.Int16)">
            <summary>
            Writes a 16-bit signed integer to the stream.
            </summary>
            <param name="value">The 16-bit signed integer to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer to the stream.
            </summary>
            <param name="value">The 32-bit unsigned integer to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the stream.
            </summary>
            <param name="value">The 32-bit signed integer to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer to the stream.
            </summary>
            <param name="value">The 64-bit unsigned integer to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.Int64)">
            <summary>
            Writes a 64-bit signed integer to the stream.
            </summary>
            <param name="value">The 64-bit signed integer to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.Single)">
            <summary>
            Writes a single-precision floating-point number to the stream.
            </summary>
            <param name="value">The single-precision floating-point number to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.Double)">
            <summary>
            Writes a double-precision floating-point number to the stream.
            </summary>
            <param name="value">The double-precision floating-point number to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.Decimal)">
            <summary>
            Writes a 128-bit decimal number to the stream.
            </summary>
            <param name="value">The 128-bit decimal number to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.String)">
            <summary>
            Writes a Unicode string to the stream.
            </summary>
            <param name="value">The Unicode string to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes a string of the specified encoding to the stream.
            </summary>
            <param name="value">The string to write to the stream.</param>
            <param name="encoding">The encoding to write the string in.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.String[])">
            <summary>
            Writes a Unicode string array to the stream.
            </summary>
            <param name="value">The Unicode string array to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(System.String[],System.Text.Encoding)">
            <summary>
            Writes a string array of the specified encoding to the stream.
            </summary>
            <param name="value">The string array to write.</param>
            <param name="encoding">The encoding to write the strings in.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.WriteArray``1(``0[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of values to the stream.
            </summary>
            <typeparam name="T">The type of value stored in the array.</typeparam>
            <param name="array">The array to write.</param>
            <param name="prefixLength">Indices to the writer if the array length should be prefixed to the data.</param>
            <param name="use64bit">Indicates to the writer that the array length is 64-bit rather than 32-bit.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Writes a dictionary of the specified key and value types to the stream.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <param name="value">The dictionary to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write``1(``0,System.Boolean)">
            <summary>
            Writes a struct or enumeration member to the stream.
            </summary>
            <typeparam name="TStruct">The type of the struct or enum.</typeparam>
            <param name="value">The object to write.</param>
            <param name="convertEndian">Indicates to the writer if endianness attributes should be regarded.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write(Rant.IO.BitField)">
            <summary>
            Write a bit field to the stream.
            </summary>
            <param name="value">The bit field to write.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.IO.EasyWriter.Write``1(System.Nullable{``0})">
            <summary>
            Writes a nullable value to the stream.
            </summary>
            <typeparam name="T">The type of the value to write.</typeparam>
            <param name="value">The nullable value to write.</param>
        </member>
        <member name="M:Rant.IO.EasyWriter.Close">
            <summary>
            Closes the writer and the underlying stream.
            </summary>
        </member>
        <member name="M:Rant.IO.EasyWriter.Dispose">
            <summary>
            Releases all resources used by the current instance of the Rant.IO.EasyWriter class.
            </summary>
        </member>
        <member name="T:Rant.IO.Endian">
            <summary>
            Indicates byte ordering of binary fields.
            </summary>
        </member>
        <member name="F:Rant.IO.Endian.Big">
            <summary>
            Big endian.
            </summary>
        </member>
        <member name="F:Rant.IO.Endian.Little">
            <summary>
            Little endian.
            </summary>
        </member>
        <member name="T:Rant.IO.EndiannessAttribute">
            <summary>
            Specifies the byte order in which a field should be written and read by EasyWriter/EasyReader.
            </summary>
        </member>
        <member name="F:Rant.IO.EndiannessAttribute.Endian">
            <summary>
            The endianness to represent the data in.
            </summary>
        </member>
        <member name="M:Rant.IO.EndiannessAttribute.#ctor(Rant.IO.Endian)">
            <summary>
            Initializes a new instance of the EasyIO.EndiannessAttribute class with the specified endianness.
            </summary>
            <param name="endianness">The endianness to represent the field data in.</param>
        </member>
        <member name="M:Rant.IO.IOUtil.ConvertEndian(System.Byte[],Rant.IO.Endian)">
            <summary>
            Converts the endianness of a series of bytes according to the endianness of the data. This process works both for system-side and data-side conversions.
            </summary>
            <param name="data">The data to convert.</param>
            <param name="dataEndianness">The endianness to convert to or from.</param>
        </member>
        <member name="T:Rant.RantCompilerException">
            <summary>
            Represents an error raised by Rant during pattern compilation.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerException.Line">
            <summary>
            The line on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerException.Column">
            <summary>
            The column on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerException.Index">
            <summary>
            The character index on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantCompilerException.Length">
            <summary>
            The length of the token(s) on which the error occurred.
            </summary>
        </member>
        <member name="T:Rant.RantOutputEntry">
            <summary>
            Represents the output of a single channel.
            </summary>
        </member>
        <member name="P:Rant.RantOutputEntry.Name">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:Rant.RantOutputEntry.Value">
            <summary>
            Gets the value of the channel.
            </summary>
        </member>
        <member name="T:Rant.RantUtils">
            <summary>
            Contains miscellaneous utility methods that provide information about the Rant engine.
            </summary>
        </member>
        <member name="M:Rant.RantUtils.FunctionExists(System.String)">
            <summary>
            Determines whether a function with the specified name is defined in the current engine version.
            </summary>
            <param name="functionName">The name of the function to search for. Argument is not case-sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunction(System.String)">
            <summary>
            Returns the function with the specified name. The return value will be null if the function is not found.
            </summary>
            <param name="functionName">The name of the function to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionNames">
            <summary>
            Enumerates the names of all available Rant functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionNamesAndAliases">
            <summary>
            Enumerates all function names and their aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctions">
            <summary>
            Enumerates the available functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionDescription(System.String,System.Int32)">
            <summary>
            Returns the description for the function with the specified name.
            </summary>
            <param name="functionName">The name of the function to get the description for.</param>
            <param name="argc">The number of arguments in the overload to get the description for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantUtils.GetFunctionAliases(System.String)">
            <summary>
            Enumerates the aliases assigned to the specified function name.
            </summary>
            <param name="functionName">The function name to retrieve aliases for.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Stringes.Lexer`1">
            <summary>
            Represents a set of rules for creating tokens from a stringe.
            </summary>
            <typeparam name="T">The identifier type to use in tokens created from the context.</typeparam>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.#ctor">
            <summary>
            Creates a new LexerRules instance.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Lexer`1.IgnoreRules">
            <summary>
            A list of token identifiers that should be ignored.
            </summary>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Ignore(`0[])">
            <summary>
            Adds the specified token types to the ignore list.
            </summary>
            <param name="types">The token types to ignore.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.GetSymbolForId(`0)">
            <summary>
            Returns the symbol that represents the specified identifier. If the identifier cannot be found, the method will return an empty string.
            </summary>
            <param name="id">The identifier to get the symbol for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.AddEndToken(`0)">
            <summary>
            Define a lexer rule that returns a token when the end of the input is reached.
            </summary>
            <param name="endTokenId">The token identifier to associate with this rule.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.AddEndToken(`0,System.String)">
            <summary>
            Define a lexer rule that returns a token when the end of the input is reached.
            </summary>
            <param name="endTokenId">The token identifier to associate with this rule.</param>
            <param name="endTokenValue">The value string to assign to the end token.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.AddUndefinedCaptureRule(`0,System.Func{Rant.Stringes.Stringe,Rant.Stringes.Stringe})">
            <summary>
            Define a lexer rule that captures unrecognized characters as a token.
            </summary>
            <param name="tokenId">The token identifier to associate with this rule.</param>
            <param name="evalFunc">A function that processes the captured stringe.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Add(System.String,`0,Rant.Stringes.SymbolPriority)">
            <summary>
            Adds a constant rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="symbol">The symbol to test for.</param>
            <param name="value">The token identifier to associate with the symbol.</param>
            <param name="priority">Determines whether the symbol should be tested before any regex rules.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Add(System.String[],`0,Rant.Stringes.SymbolPriority)">
            <summary>
            Adds a constant rule to the context that affects all symbols in the specified array. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="symbols">The symbols to test for.</param>
            <param name="value">The token identifier to associate with the symbols.</param>
            <param name="priority">Determines whether the symbol should be tested before any regex rules.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Add(System.String,`0,System.Boolean,Rant.Stringes.SymbolPriority)">
            <summary>
            Adds a constant rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="symbol">The symbol to test for.</param>
            <param name="value">The token identifier to associate with the symbol.</param>
            <param name="ignoreCase">Specifies whether the rule should ignore capitalization.</param>
            <param name="priority">Determines whether the symbol should be tested before any regex rules.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Add(System.String[],`0,System.Boolean,Rant.Stringes.SymbolPriority)">
            <summary>
            Adds a constant rule to the context that affects all symbols in the specified array. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="symbols">The symbols to test for.</param>
            <param name="value">The token identifier to associate with the symbols.</param>
            <param name="ignoreCase">Specifies whether the rule should ignore capitalization.</param>
            <param name="priority">Determines whether the symbol should be tested before any regex rules.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Add(System.Text.RegularExpressions.Regex,`0,System.Int32)">
            <summary>
            Adds a regex rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="regex">The regex to test for.</param>
            <param name="value">The token identifier to associate with the symbol.</param>
            <param name="priority">The priority of the rule. Higher values are checked first.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Add(System.Text.RegularExpressions.Regex,System.Func{System.Text.RegularExpressions.Match,`0},System.Int32)">
            <summary>
            Adds a regex rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="regex">The regex to test for.</param>
            <param name="generator">A function that generates a token identifier from the match.</param>
            <param name="priority">The priority of the rule. Higher values are checked first.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Add(System.Func{Rant.Stringes.StringeReader,System.Boolean},`0,System.Int32)">
            <summary>
            Adds a function rule to the context. This will throw an InvalidOperationException if called after the context is used to create tokens.
            </summary>
            <param name="func">The function to read the token with.</param>
            <param name="value">The token identifier to associate with the function.</param>
            <param name="priority">The priority of the rule. Higher values are checked first.</param>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.Tokenize(Rant.Stringes.Stringe)">
            <summary>
            Tokenizes the input stringe and enumerates the resulting tokens.
            </summary>
            <param name="input">The input to tokenize.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Lexer`1.GetEnumerator">
            <summary>
            Definitely does not return the enumerator for the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Stringes.SymbolPriority">
            <summary>
            Used to manipulate the order in which symbol (non-regex) rules are tested.
            </summary>
        </member>
        <member name="F:Rant.Stringes.SymbolPriority.Last">
            <summary>
            Test symbol after testing regex symbols. This is the default value for all symbols rules.
            </summary>
        </member>
        <member name="F:Rant.Stringes.SymbolPriority.First">
            <summary>
            Test symbol before testing any regex rules.
            </summary>
        </member>
        <member name="T:Rant.Stringes.Chare">
            <summary>
            Represents a charactere, which provides location information on a character taken from a stringe.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Chare.Source">
            <summary>
            The stringe from which the charactere was taken.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Chare.Character">
            <summary>
            The underlying character.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Chare.Offset">
            <summary>
            The position of the charactere in the stringe.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Chare.Line">
            <summary>
            The line on which the charactere appears.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Chare.Column">
            <summary>
            The column on which the charactere appears.
            </summary>
        </member>
        <member name="M:Rant.Stringes.Chare.ToString">
            <summary>
            Returns the string representation of the current charactere.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Extensions.ToStringe(System.Object)">
            <summary>
            Converts the specified value into a stringe.
            </summary>
            <param name="value">The object to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Stringes.Stringe">
            <summary>
            Represents a string or a substring in relation to its parent. Provides line number, column, offset, and other useful data.
            </summary>
        </member>
        <member name="M:Rant.Stringes.Stringe.Empty(Rant.Stringes.Stringe)">
            <summary>
            Returns an empty stringe based on the position of another stringe.
            </summary>
            <param name="basis">The basis stringe to get position info from.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.IsNullOrEmpty(Rant.Stringes.Stringe)">
            <summary>
            Indicates whether the specified stringe is null or empty.
            </summary>
            <param name="stringe">The stringe to test.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Range(Rant.Stringes.Stringe,Rant.Stringes.Stringe)">
            <summary>
            Returns a stringe whose endpoints are the specified stringes. The stringes must both belong to the same parent string.
            </summary>
            <param name="a">The first stringe.</param>
            <param name="b">The second stringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Between(Rant.Stringes.Stringe,Rant.Stringes.Stringe)">
            <summary>
            Returns a stringe comprised of all text between the two specified stringes. Returns null if the stringes are adjacent or intersected.
            </summary>
            <param name="a">The first stringe.</param>
            <param name="b">The second stringe.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Stringes.Stringe.Offset">
            <summary>
            The offset of the stringe in the string.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.Length">
            <summary>
            The length of the string represented by the stringe.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.Line">
            <summary>
            The 1-based line number at which the stringe begins.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.Column">
            <summary>
            The 1-based column at which the stringe begins.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.End">
            <summary>
            The index at which the stringe ends in the string.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.IsSubstring">
            <summary>
            Indicates if the stringe is a substring.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.IsEmpty">
            <summary>
            Indicates if the stringe is empty.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.Value">
            <summary>
            The substring value represented by the stringe. If the stringe is the parent, this will provide the original string.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.ParentString">
            <summary>
            Gets the original string from which the stringe was originally derived.
            </summary>
        </member>
        <member name="M:Rant.Stringes.Stringe.#ctor(System.String)">
            <summary>
            Creates a new stringe from the specified string.
            </summary>
            <param name="value">The string to turn into a stringe.</param>
        </member>
        <member name="P:Rant.Stringes.Stringe.OccurrenceCount">
            <summary>
            The number of times the current string occurs in the parent string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rant.Stringes.Stringe.NextIndex">
            <summary>
            The next index in the parent string at which the current stringe value occurs.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.Item(System.Int32)">
            <summary>
            Gets the charactere at the specified index in the stringe.
            </summary>
            <param name="index">The index of the charactere to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.IsSubstringeOf(Rant.Stringes.Stringe)">
            <summary>
            Determines whether the current stringe is a substringe of the specified parent stringe.
            </summary>
            <param name="parent">The parent stringe to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns the zero-based index at which the specified string first occurs, relative to the substringe. The search starts at the specified index.
            </summary>
            <param name="input">The string to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <param name="comparisonType">The string comparison rules to apply to the search.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.IndexOfTotal(System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns the zero-based index at which the specified string first occurs, relative to the parent string. The search starts at the specified index.
            </summary>
            <param name="input">The string to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <param name="comparisonType">The string comparison rules to apply to the search.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.IndexOf(System.Char,System.Int32)">
            <summary>
            Returns the zero-based index at which the specified character first occurs, relative to the substringe. The search starts at the specified index.
            </summary>
            <param name="input">The character to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.IndexOfTotal(System.Char,System.Int32)">
            <summary>
            Returns the zero-based index at which the specified character first occurs, relative to the parent string. The search starts at the specified index.
            </summary>
            <param name="input">The character to search for.</param>
            <param name="start">The index at which to begin the search.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Substringe(System.Int32,System.Int32)">
            <summary>
            Creates a substringe from the stringe, starting at the specified index and extending to the specified length.
            </summary>
            <param name="offset">The offset at which to begin the substringe.</param>
            <param name="length">The length of the substringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Substringe(System.Int32)">
            <summary>
            Create a substringe from the stringe, starting at the specified index and extending to the end.
            </summary>
            <param name="offset">The offset at which to begin the substringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a substringe that contains all characters between the two specified positions in the stringe.
            </summary>
            <param name="a">The left side of the slice.</param>
            <param name="b">The right side of the slice.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Dilate(System.Int32,System.Int32)">
            <summary>
            Returns a new substringe whose left and right boundaries are offset by the specified values.
            </summary>
            <param name="left">The amount, in characters, to offset the left boundary to the left.</param>
            <param name="right">The amount, in characters, to offset the right boundary to the right.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Trim">
            <summary>
            Returns the stringe with all leading and trailing white space characters removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Trim(System.Char[])">
            <summary>
            Returns the stringe with any occurrences of the specified characters stripped from the ends.
            </summary>
            <param name="trimChars">The characters to strip off the ends of the stringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.TrimStart(System.Char[])">
            <summary>
            Returns a copy of the stringe with the specified characters removed from the start.
            </summary>
            <param name="trimChars">The characters to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.TrimEnd(System.Char[])">
            <summary>
            Returns a copy of the stringe with the specified characters removed from the end.
            </summary>
            <param name="trimChars">The characters to remove.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Stringes.Stringe.LeftPadded">
            <summary>
            Indicates whether the left side of the line on which the stringe exists is composed entirely of white space.
            </summary>
        </member>
        <member name="P:Rant.Stringes.Stringe.RightPadded">
            <summary>
            Indicates whether the line context to the right side of the stringe is composed on uninterrupted white space.
            </summary>
        </member>
        <member name="M:Rant.Stringes.Stringe.Split(System.String[])">
            <summary>
            Splits the stringe into multiple parts by the specified delimiters.
            </summary>
            <param name="separators">The delimiters by which to split the stringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Split(System.Char[])">
            <summary>
            Splits the stringe into multiple parts by the specified delimiters.
            </summary>
            <param name="separators">The delimiters by which to split the stringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Split(System.Char[],System.StringSplitOptions)">
            <summary>
            Splits the stringe into multiple parts by the specified delimiters.
            </summary>
            <param name="separators">The delimiters by which to split the stringe.</param>
            <param name="options">Specifies whether empty substringes should be included in the return value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Split(System.String[],System.StringSplitOptions)">
            <summary>
            Splits the stringe into multiple parts by the specified delimiters.
            </summary>
            <param name="separators">The delimiters by which to split the stringe.</param>
            <param name="options">Specifies whether empty substringes should be included in the return value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Split(System.Char[],System.Int32,System.StringSplitOptions)">
            <summary>
            Splits the stringe into multiple parts by the specified delimiters.
            </summary>
            <param name="separators">The delimiters by which to split the stringe.</param>
            <param name="count">The maximum number of substringes to return. If the count exceeds this number, the last item will be the remainder of the stringe.</param>
            <param name="options">Specifies whether empty substringes should be included in the return value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Split(System.String[],System.Int32,System.StringSplitOptions)">
            <summary>
            Splits the stringe into multiple parts by the specified delimiters.
            </summary>
            <param name="separators">The delimiters by which to split the stringe.</param>
            <param name="count">The maximum number of substringes to return. If the count exceeds this number, the last item will be the remainder of the stringe.</param>
            <param name="options">Specifies whether empty substringes should be included in the return value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.op_Explicit(Rant.Stringes.Stringe)~System.String">
            <summary>
            Converts a Stringe to its string value.
            </summary>
            <param name="stringe">The stringe to convert.</param>
        </member>
        <member name="M:Rant.Stringes.Stringe.op_Implicit(System.String)~Rant.Stringes.Stringe">
            <summary>
            Converts a string to a Stringe.
            </summary>
            <param name="value">The string to convert.</param>
        </member>
        <member name="M:Rant.Stringes.Stringe.op_Equality(Rant.Stringes.Stringe,Rant.Stringes.Stringe)">
            <summary>
            Determines whether two stringes are equal.
            </summary>
            <param name="a">The first stringe.</param>
            <param name="b">The second stringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.op_Inequality(Rant.Stringes.Stringe,Rant.Stringes.Stringe)">
            <summary>
            Determines whether two stringes are not equal.
            </summary>
            <param name="a">The first stringe.</param>
            <param name="b">The second stringe.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.Equals(System.Object)">
            <summary>
            Determines whether the current stringe is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.GetHashCode">
            <summary>
            Returns the hash of the current stringe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.Stringe.ToString">
            <summary>
            Returns the string value of the stringe.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Stringes.Stringe.Stref">
            <summary>
            Stores cached character data for a Stringe.
            </summary>
        </member>
        <member name="M:Rant.Stringes.Stringe.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the characteres in the stringe.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Stringes.StringeReader">
            <summary>
            Represents a reader that can read data from a stringe.
            </summary>
        </member>
        <member name="P:Rant.Stringes.StringeReader.Origin">
            <summary>
            Gets or sets a string describing where the stringe originated from. Used for exception messages.
            </summary>
        </member>
        <member name="P:Rant.Stringes.StringeReader.Stringe">
            <summary>
            The stringe being read by the current instance.
            </summary>
        </member>
        <member name="M:Rant.Stringes.StringeReader.#ctor(System.String)">
            <summary>
            Creates a new StringeReader instance using the specified string as input.
            </summary>
            <param name="value">The string to use as input. This will be converted to a root-level stringe.</param>
        </member>
        <member name="M:Rant.Stringes.StringeReader.#ctor(Rant.Stringes.Stringe)">
            <summary>
            Creates a new StringeReader instance using the specified stringe as input.
            </summary>
            <param name="value">The stringe to use as input.</param>
        </member>
        <member name="P:Rant.Stringes.StringeReader.EndOfStringe">
            <summary>
            Indicates whether the reader position is at the end of the input string.
            </summary>
        </member>
        <member name="M:Rant.Stringes.StringeReader.ReadChare">
            <summary>
            Reads a charactere from the input and advances the position by one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.PeekChare">
            <summary>
            Returns the next charactere in the input, but does not consume it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.PeekChar">
            <summary>
            Returns the next character in the input, but does not consume it. Returns -1 if no more characters can be read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.ReadStringe(System.Int32)">
            <summary>
            Reads a stringe from the input and advances the position by the number of characters read.
            </summary>
            <param name="length">The number of characters to read.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.ReadUntil(System.Char)">
            <summary>
            Reads a stringe from the current position to the next occurrence of the specified character. If no match is found, it reads to the end.
            </summary>
            <param name="value">The character to stop at.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.ReadUntilAny(System.Char[])">
            <summary>
            Reads a stringe from the current position to the next occurrence of any of the specified characters. If no match is found, it reads to the end.
            </summary>
            <param name="values">The characters to stop at.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.Eat(System.Char)">
            <summary>
            Indicates whether the specified character occurs at the reader's current position, and consumes it.
            </summary>
            <param name="value">The character to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.Eat(System.String)">
            <summary>
            Indicates whether the specified string occurs at the reader's current position, and consumes it.
            </summary>
            <param name="value">The string to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.Eat(System.Text.RegularExpressions.Regex)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position. If a match is found, the reader consumes it.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.Eat(System.Text.RegularExpressions.Regex,Rant.Stringes.Stringe@)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position. If a match is found, the reader consumes it and outputs the result.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <param name="result">The stringe to output the result to.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.IsNext(System.Char)">
            <summary>
            Indicates whether the specified character occurs at the reader's current position.
            </summary>
            <param name="value">The character to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.IsNext(System.Char[])">
            <summary>
            Indicates whether any of the specified characters occur at the reader's current position.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.IsNext(System.String,System.StringComparison)">
            <summary>
            Indicates whether the specified string occurs at the reader's current position.
            </summary>
            <param name="value">The string to test for.</param>
            <param name="strcmp">The string comparison type to use in the test.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.IsNext(System.Text.RegularExpressions.Regex)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.IsNext(System.Text.RegularExpressions.Regex,Rant.Stringes.Stringe@)">
            <summary>
            Indicates whether the specified regular expression matches the input at the reader's current position, and outputs the result.
            </summary>
            <param name="regex">The regular expression to test for.</param>
            <param name="result">The stringe to output the result to.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.SkipWhiteSpace">
            <summary>
            Advances the reader position past any immediate white space characters.
            </summary>
        </member>
        <member name="M:Rant.Stringes.StringeReader.WasLast(System.Char)">
            <summary>
            Returns a boolean value indicating whether the previous character matches the specified character.
            </summary>
            <param name="c">The character to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.WasLast(System.Char[])">
            <summary>
            Returns a boolean value indicating whether the previous character matches any of the specified characters.
            </summary>
            <param name="chars">The characters to test for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Stringes.StringeReader.ReadToken``1(Rant.Stringes.Lexer{``0})">
            <summary>
            Reads the next token from the current position, then advances the position past it.
            </summary>
            <typeparam name="T">The token identifier type to use.</typeparam>
            <param name="rules">The lexer to use.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Stringes.StringeReader.Position">
            <summary>
            The current zero-based position of the reader.
            </summary>
        </member>
        <member name="P:Rant.Stringes.StringeReader.Length">
            <summary>
            The total length, in characters, of the stringe being read.
            </summary>
        </member>
        <member name="T:Rant.Stringes.Token`1">
            <summary>
            Represents a token with a string value and a custom identifier.
            </summary>
            <typeparam name="T">The identifier type.</typeparam>
        </member>
        <member name="P:Rant.Stringes.Token`1.ID">
            <summary>
            The token identifier.
            </summary>
        </member>
        <member name="M:Rant.Stringes.Token`1.ToString">
            <summary>
            Returns a string representation of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant._">
            <summary>
            Makes tuples for your pleasure.
            </summary>
        </member>
        <member name="M:Rant._.Create``1(``0)">
            <summary>
            Makes Item1 1-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <param name="Item1">First value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``2(``0,``1)">
            <summary>
            Makes Item1 2-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``3(``0,``1,``2)">
            <summary>
            Makes Item1 3-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``4(``0,``1,``2,``3)">
            <summary>
            Makes Item1 4-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Makes Item1 5-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Makes Item1 6-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <param name="Item6">Sixth value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Makes Item1 7-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <param name="Item6">Sixth value.</param>
            <param name="Item7">Seventh value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant._.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Makes an 8-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
            <typeparam name="H">Eighth type.</typeparam>
            <param name="Item1">First value.</param>
            <param name="Item2">Second value.</param>
            <param name="Item3">Third value.</param>
            <param name="Item4">Fourth value.</param>
            <param name="Item5">Fifth value.</param>
            <param name="Item6">Sixth value.</param>
            <param name="Item7">Seventh value.</param>
            <param name="Item8">Eighth value.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`1">
            <summary>
            1-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
        </member>
        <member name="F:Rant._`1.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="M:Rant._`1.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`1.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`1.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`2">
            <summary>
            2-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
        </member>
        <member name="F:Rant._`2.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`2.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="M:Rant._`2.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`2.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`2.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`3">
            <summary>
            3-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
        </member>
        <member name="F:Rant._`3.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`3.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`3.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="M:Rant._`3.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`3.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`3.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`4">
            <summary>
            4-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
        </member>
        <member name="F:Rant._`4.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`4.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`4.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`4.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="M:Rant._`4.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`4.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`4.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`5">
            <summary>
            5-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
        </member>
        <member name="F:Rant._`5.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`5.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="M:Rant._`5.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`5.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`5.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`6">
            <summary>
            6-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
        </member>
        <member name="F:Rant._`6.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="F:Rant._`6.Item6">
            <summary>
            The sixth item.
            </summary>
        </member>
        <member name="M:Rant._`6.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`6.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`6.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`7">
            <summary>
            7-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
        </member>
        <member name="F:Rant._`7.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item6">
            <summary>
            The sixth item.
            </summary>
        </member>
        <member name="F:Rant._`7.Item7">
            <summary>
            The seventh item.
            </summary>
        </member>
        <member name="M:Rant._`7.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`7.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`7.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant._`8">
            <summary>
            8-tuple.
            </summary>
            <typeparam name="A">First type.</typeparam>
            <typeparam name="B">Second type.</typeparam>
            <typeparam name="C">Third type.</typeparam>
            <typeparam name="D">Fourth type.</typeparam>
            <typeparam name="E">Fifth type.</typeparam>
            <typeparam name="F">Sixth type.</typeparam>
            <typeparam name="G">Seventh type.</typeparam>
            <typeparam name="H">Eighth tuple.</typeparam>
        </member>
        <member name="F:Rant._`8.Item1">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item2">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item3">
            <summary>
            The third item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item4">
            <summary>
            The fourth item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item5">
            <summary>
            The fifth item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item6">
            <summary>
            The sixth item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item7">
            <summary>
            The seventh item.
            </summary>
        </member>
        <member name="F:Rant._`8.Item8">
            <summary>
            The eighth item.
            </summary>
        </member>
        <member name="M:Rant._`8.ToString">
            <summary>
            Returns a string representation of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`8.GetHashCode">
            <summary>
            Returns a hash of the tuple's contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant._`8.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified object.
            </summary>
            <param name="obj">The object to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Formats.RantFormat">
            <summary>
            Describes language-specific formatting instructions for localizing interpreter output.
            </summary>
        </member>
        <member name="F:Rant.Formats.RantFormat.English">
            <summary>
            English formatting.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.TitleCaseExclusions">
            <summary>
            Gets the collection of words excluded from Title Case capitalization.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.OpeningPrimaryQuote">
            <summary>
            The opening primary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.ClosingPrimaryQuote">
            <summary>
            The closing primary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.OpeningSecondaryQuote">
            <summary>
            The opening secondary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.ClosingSecondaryQuote">
            <summary>
            The closing secondary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.Letters">
            <summary>
            The letter set used by escape sequences like \c and \w.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.IndefiniteArticles">
            <summary>
            The vowel-sensitive indefinite articles used by the \a escape sequence.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantFormat.Culture">
            <summary>
            The culture to format output strings with.
            </summary>
        </member>
        <member name="T:Rant.Formats.RantUserFormat">
            <summary>
            Represents a user-specified Rant format.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantUserFormat.OpeningPrimaryQuote">
            <summary>
            The opening primary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantUserFormat.ClosingPrimaryQuote">
            <summary>
            The closing primary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantUserFormat.OpeningSecondaryQuote">
            <summary>
            The opening secondary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantUserFormat.ClosingSecondaryQuote">
            <summary>
            The closing secondary quotation mark.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantUserFormat.Letters">
            <summary>
            The letter set used by escape sequences like \c and \w.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantUserFormat.IndefiniteArticles">
            <summary>
            The vowel-sensitive indefinite articles used by the \a escape sequence.
            </summary>
        </member>
        <member name="P:Rant.Formats.RantUserFormat.Culture">
            <summary>
            The culture to format output strings with.
            </summary>
        </member>
        <member name="M:Rant.Formats.RantUserFormat.AddTitleCaseExclusions(System.String[])">
            <summary>
            Adds the specified strings to the title case exclusion list for the current format.
            </summary>
            <param name="words">The words to exclude from title case capitalization.</param>
        </member>
        <member name="T:Rant.Formats.IndefiniteArticles">
            <summary>
            Defines indefinite article (\a) formatting to use when executing Rant patterns.
            </summary>
        </member>
        <member name="F:Rant.Formats.IndefiniteArticles.English">
            <summary>
            Indefinite articles for English.
            </summary>
        </member>
        <member name="P:Rant.Formats.IndefiniteArticles.ConsonantForm">
            <summary>
            The consonant form of the current indefinite article.
            </summary>
        </member>
        <member name="P:Rant.Formats.IndefiniteArticles.VowelForm">
            <summary>
            The vowel form of the current indefinite article.
            </summary>
        </member>
        <member name="M:Rant.Formats.IndefiniteArticles.#ctor(System.String,System.String,Rant.Formats.IndefiniteArticleRules)">
            <summary>
            Creates a new IndefiniteArticle object with the specified values and rules.
            </summary>
            <param name="consonantForm">The consonant form of the article.</param>
            <param name="vowelForm">The vowel form of the article.</param>
            <param name="rules"></param>
        </member>
        <member name="T:Rant.Formats.IndefiniteArticleRules">
            <summary>
            Represents a rule set for determining the correct indefinite article to place before a word.
            </summary>
        </member>
        <member name="F:Rant.Formats.IndefiniteArticleRules.English">
            <summary>
            Predefined article rules for English.
            </summary>
        </member>
        <member name="M:Rant.Formats.IndefiniteArticleRules.#ctor(System.String[],System.String[],System.String[],System.String[])">
            <summary>
            Creates a new IndefiniteArticleRules instance with the specified parameters that uses default vowels (a, e, i, o, u).
            </summary>
            <param name="ignorePrefixes">The word prefixes that are to be excluded from vowel tests.</param>
            <param name="allowPrefixes">The word prefixes that are to be included in vowel tests, which would normally test negative.</param>
            <param name="ignoreWords">The words that should be ignored in vowel tests.</param>
            <param name="allowWords">The words that should be included in vowel tests, which would normally test negative.</param>
        </member>
        <member name="M:Rant.Formats.IndefiniteArticleRules.#ctor(System.Char[],System.String[],System.String[],System.String[],System.String[])">
            <summary>
            Creates a new IndefiniteArticleRules instance with the specified parameters.
            </summary>
            <param name="vowels">The vowel characters that the rules should test for.</param>
            <param name="ignorePrefixes">The word prefixes that are to be excluded from vowel tests.</param>
            <param name="allowPrefixes">The word prefixes that are to be included in vowel tests, which would normally test negative.</param>
            <param name="ignoreWords">The words that should be ignored in vowel tests.</param>
            <param name="allowWords">The words that should be included in vowel tests, which would normally test negative.</param>
        </member>
        <member name="P:Rant.Formats.IndefiniteArticleRules.Vowels">
            <summary>
            The vowel characters that the rules should test for.
            </summary>
        </member>
        <member name="P:Rant.Formats.IndefiniteArticleRules.IgnorePrefixes">
            <summary>
            The word prefixes that are to be excluded from vowel tests.
            </summary>
        </member>
        <member name="P:Rant.Formats.IndefiniteArticleRules.AllowPrefixes">
            <summary>
            The word prefixes that are to be included in vowel tests, which would normally test negative.
            </summary>
        </member>
        <member name="P:Rant.Formats.IndefiniteArticleRules.IgnoreWords">
            <summary>
            The words that should be ignored in vowel tests.
            </summary>
        </member>
        <member name="P:Rant.Formats.IndefiniteArticleRules.AllowWords">
            <summary>
            The words that should be included in vowel tests, which would normally test negative.
            </summary>
        </member>
        <member name="T:Rant.RantOutput">
            <summary>
            Represents a collection of strings generated by a pattern.
            </summary>
        </member>
        <member name="P:Rant.RantOutput.Item(System.String)">
            <summary>
            Gets the output of the channel with the specified name.
            </summary>
            <param name="channel">The name of the channel.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RantOutput.Item(System.String[])">
            <summary>
            Gets an array containing the values of the specified channels, in the order they appear.
            </summary>
            <param name="channels">The names of the channels whose values are to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RantOutput.Seed">
            <summary>
            The seed used to generate the output.
            </summary>
        </member>
        <member name="P:Rant.RantOutput.BaseGeneration">
            <summary>
            The generation at which the RNG was initially set before the pattern was run.
            </summary>
        </member>
        <member name="P:Rant.RantOutput.Main">
            <summary>
            The main output string.
            </summary>
        </member>
        <member name="M:Rant.RantOutput.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the outputs in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantOutput.ToString">
            <summary>
            Returns the output from the "main" channel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantOutput.op_Implicit(Rant.RantOutput)~System.String">
            <summary>
            Returns the output from the "main" channel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.RantPackage">
            <summary>
            Represents a collection of patterns and tables that can be exported to an archive file.
            </summary>
        </member>
        <member name="M:Rant.RantPackage.AddPattern(Rant.RantPattern)">
            <summary>
            Adds the specified pattern to the package.
            </summary>
            <param name="pattern">The pattern to add.</param>
        </member>
        <member name="M:Rant.RantPackage.AddTable(Rant.Vocabulary.RantDictionaryTable)">
            <summary>
            Adds the specified table to the package.
            </summary>
            <param name="table">The table to add.</param>
        </member>
        <member name="M:Rant.RantPackage.AddDictionary(Rant.Vocabulary.RantDictionary)">
            <summary>
            Adds the tables from the specified dictionary to the package.
            </summary>
            <param name="dictionary">The dictionary to add.</param>
        </member>
        <member name="M:Rant.RantPackage.GetPatterns">
            <summary>
            Enumerates the patterns contained in the package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantPackage.GetTables">
            <summary>
            Enumerates the tables contained in the package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RantPackage.Save(System.String)">
            <summary>
            Saves the package to the specified file path.
            </summary>
            <param name="path">The path to the file to create.</param>
        </member>
        <member name="M:Rant.RantPackage.Load(System.String)">
            <summary>
            Loads a package from the specified path and returns it as a RantPackage object.
            </summary>
            <param name="path">The path to the package file to load.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantPackage.Load(System.IO.Stream)">
            <summary>
            Loads a package from the specified stream and returns it as a RantPackage object.
            </summary>
            <param name="source">The stream to load the package data from.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.Carrier">
            <summary>
            Represents information that can be used to synchronize query selections based on certain criteria.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Carrier.#ctor">
            <summary>
            Creates an empty carrier.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Carrier.GetTypeCount(Rant.Vocabulary.CarrierComponent)">
            <summary>
            Returns how many of a certain carrier component type are assigned to the current instance.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Carrier.AddComponent(Rant.Vocabulary.CarrierComponent,System.String[])">
            <summary>
            Adds a component of the specified type and name to the current instance.
            </summary>
            <param name="type">The type of carrier to add.</param>
            <param name="values">The names to assign to the component type.</param>
        </member>
        <member name="M:Rant.Vocabulary.Carrier.GetCarriers(Rant.Vocabulary.CarrierComponent)">
            <summary>
            Iterates through the current instances's carriers of the specified type.
            </summary>
            <param name="type">The type of component to iterate through.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Carrier.GetTotalCount">
            <summary>
            Retreives the total amount of all components.
            </summary>
            <returns>The total amount of all components.</returns>
        </member>
        <member name="T:Rant.Vocabulary.CarrierComponent">
            <summary>
            Defines carrier types for queries.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.Match">
            <summary>
            Select the same entry every time.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.Dissociative">
            <summary>
            Share no classes.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.MatchDissociative">
            <summary>
            Share no classes with a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.Associative">
            <summary>
            Classes must exactly match.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.MatchAssociative">
            <summary>
            Classes must exactly match those of a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.Divergent">
            <summary>
            Have at least one different class.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.MatchDivergent">
            <summary>
            Have at least one different class than a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.Relational">
            <summary>
            Share at least one class.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.MatchRelational">
            <summary>
            Share at least one class with a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.Unique">
            <summary>
            Never choose the same entry twice.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.MatchUnique">
            <summary>
            Choose an entry that is different from a match carrier entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.CarrierComponent.Rhyme">
            <summary>
            Choose terms that rhyme.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.ClassFilter">
            <summary>
            Defines a set of class filtering rules for a query.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.ClassFilter.IsEmpty">
            <summary>
            Gets a boolean value indicating whether there are any rules added to the current ClassFilter instance.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.ClassFilter.AddRule(Rant.Vocabulary.ClassFilterRule)">
            <summary>
            Adds a single-class rule to the filter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rant.Vocabulary.ClassFilter.AddRuleSwitch(Rant.Vocabulary.ClassFilterRule[])">
            <summary>
            Adds a rule set that must satisfy one of the specified rules.
            </summary>
            <param name="items">The items to include in the rule switch.</param>
        </member>
        <member name="M:Rant.Vocabulary.ClassFilter.Test(Rant.Vocabulary.RantDictionaryEntry,System.Boolean)">
            <summary>
            Determines if the specified dictionary entry passes the filter.
            </summary>
            <param name="entry">The entry to test.</param>
            <param name="exclusive">Specifies whether the search is exclusive.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.ClassFilter.AllowsClass(System.String)">
            <summary>
            Returns a boolean value indicating whether the specified class is explicitly allowed by the current ClassFilter.
            </summary>
            <param name="className">The class to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.ClassFilterRule">
            <summary>
            Defines a query filter for a single dictionary entry class.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.ClassFilterRule.ShouldMatch">
            <summary>
            Determines whether the filter item expects a positive or negative match for the class.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.ClassFilterRule.Class">
            <summary>
            The name of the class to search for.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.ClassFilterRule.#ctor(System.String)">
            <summary>
            Initializes a new ClassFilterRule that checks for a positive match to the specified class.
            </summary>
            <param name="className">The name of the class to search for.</param>
        </member>
        <member name="M:Rant.Vocabulary.ClassFilterRule.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new ClassFilterRule that checks for a positive or negative match to the specified class.
            </summary>
            <param name="className">The name of the class to search for.</param>
            <param name="shouldMatch">Determines whether the filter item expects a positive or negative match for the class.</param>
        </member>
        <member name="T:Rant.Vocabulary.Diff">
            <summary>
            Diffs your marks.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Diff.Pattern">
            <summary>
            The pattern string for the diff.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Diff.#ctor(System.String)">
            <summary>
            Creates a new Diffmark pattern for you to enjoy.
            </summary>
            <param name="patternString">The pattern string.</param>
        </member>
        <member name="M:Rant.Vocabulary.Diff.Mark(System.String)">
            <summary>
            Applies the pattern to a string.
            </summary>
            <param name="baseString">The string to apply the pattern to.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Diff.Mark(System.String,System.String)">
            <summary>
            Transforms one string to another.
            </summary>
            <param name="baseString">The base string to transform.</param>
            <param name="pattern">The Diffmark pattern to apply to the string.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Diff.Derive(System.String,System.String)">
            <summary>
            Derives a Diffmark pattern that can transform the specified 'before' string to the specified 'after' string.
            </summary>
            <param name="before">The string before it is transformed.</param>
            <param name="after">The string after it is transformed.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.DoubleMetaphoneStringExtension">
            <summary>
            DoubleMetaphone string extension
            </summary>
            <remarks>
            Original C++ implementation:
            	"Double Metaphone (c) 1998, 1999 by Lawrence Philips"
            	http://www.ddj.com/cpp/184401251?pgno=1
            </remarks>
        </member>
        <member name="M:Rant.Vocabulary.EntryTypeDefFilter.Test(Rant.Vocabulary.EntryTypeDefFilter,Rant.Vocabulary.RantDictionaryEntry)">
            <summary>
            Determines whether a type should apply to the specifed entry according to the specified filter.
            </summary>
            <param name="filter">The filter to test with.</param>
            <param name="entry">The entry to test.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.QueryState">
            <summary>
            Maintains state information used by queries.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.QueryState._uniqueTable">
            <summary>
            Distinct carrier table.
            Wherein the KEY is the UNIQUE ID, and the VALUE is the collection of used entries.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.QueryState._rhymeTable">
            <summary>
            Rhyme carrier table.
            Wherein the KEY is the RHYME ID and SUBTYPE, and the VALUE is the ROOT TERM and USED TERMS.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.QueryState._matchTable">
            <summary>
            Match table.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.QueryState._assocTable">
            <summary>
            Associative/Disassociative/Relational/Divergent carrier table.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.Range">
            <summary>
            Defines a set of boundaries that can be used to enforce range requirements on numeric values.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Range.Minimum">
            <summary>
            Gets or sets the minimum bound of the range. Set this to null for no minimum.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Range.Maximum">
            <summary>
            Gets or sets the maximum bound of the range. Set this to null for no maximum.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.Range.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new Range object with the specified minimum and maximum bounds.
            </summary>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
        </member>
        <member name="M:Rant.Vocabulary.Range.Test(System.Int32)">
            <summary>
            Determines if the specified number is within the current range.
            </summary>
            <param name="value">The value to test.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Range.AtLeast(System.Int32)">
            <summary>
            Creates a new Range object with a minimum bound.
            </summary>
            <param name="min">The minimum bound.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Range.AtMost(System.Int32)">
            <summary>
            Creates a new Range object with a maximum bound.
            </summary>
            <param name="max">The maximum bound.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Range.Exactly(System.Int32)">
            <summary>
            Creates a new Range object that accepts a single value.
            </summary>
            <param name="number">The value that the returned Range will accept.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.Range.Between(System.Int32,System.Int32)">
            <summary>
            Creates a new Range object with a minimum and maximum bound.
            </summary>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.Range.Anything">
            <summary>
            Creates a new Range object that accepts all values.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.RantTableLoadException">
            <summary>
            Thrown when Rant encounters an error while loading a dictionary table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantTableLoadException.Line">
            <summary>
            Gets the line number on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantTableLoadException.Column">
            <summary>
            Gets the column on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantTableLoadException.Offset">
            <summary>
            Gets the character offset on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantTableLoadException.Origin">
            <summary>
            Gets a string describing where the table was loaded from. For tables loaded from disk, this will be the file path.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionaryTable">
            <summary>
            Represents a named collection of dictionary entries.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.Save(System.String,System.Boolean)">
            <summary>
            Saves the contents of the dictionary to a file at the specified path.
            </summary>
            <param name="path">The path to the file to save.</param>
            <param name="useDiffmark">Specifies whether to generate Diffmarked entries.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.FromFile(System.String)">
            <summary>
            Loads a RantDictionary from the file at the specified path.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.#ctor(System.String,System.String[],System.Collections.Generic.IEnumerable{Rant.Vocabulary.RantDictionaryEntry})">
            <summary>
            Creates a new RantDictionaryTable with the specified entries.
            </summary>
            <param name="name">the name of the table.</param>
            <param name="subtypes">The subtype names.</param>
            <param name="entries">The entries to add to the table.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.#ctor(System.String,System.String[],System.Collections.Generic.IEnumerable{Rant.Vocabulary.RantDictionaryEntry},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new RantDictionaryTable with the specified entries.
            </summary>
            <param name="name">the name of the table.</param>
            <param name="subtypes">The subtype names.</param>
            <param name="entries">The entries to add to the table.</param>
            <param name="hiddenClasses">The classes to hide.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.GetEntries">
            <summary>
            Gets the entries stored in the table.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.Subtypes">
            <summary>
            The subtypes used by the table entries.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.Name">
            <summary>
            The name of the table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.HiddenClasses">
            <summary>
            Gets the hidden classes of the table.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTable.EntryCount">
            <summary>
            The number of entries stored in the table.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTable.Merge(Rant.Vocabulary.RantDictionaryTable,Rant.Vocabulary.TableMergeBehavior)">
            <summary>
            Adds another table's entries to the current table, given that they share the same name and subtypes.
            </summary>
            <param name="other">The table whose entries will be added to the current instance.</param>
            <param name="mergeBehavior">The merging strategy to employ.</param>
            <returns>True if merge succeeded; otherwise, False.</returns>
        </member>
        <member name="T:Rant.Vocabulary.Query">
            <summary>
            Represents a set of search criteria for a Rant dictionary.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Query.Carrier">
            <summary>
            The carrier for the query.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Query.Name">
            <summary>
            The name of the dictionary to search.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Query.Subtype">
            <summary>
            The subtype of the dictionary entry to use.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Query.Exclusive">
            <summary>
            Specifies exclusivity of the class filter.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Query.SyllablePredicate">
            <summary>
            The syllable range predicate. Set to null for no syllable count filtering.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Query.ClassFilter">
            <summary>
            The class filter to search by.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.Query.RegexFilters">
            <summary>
            The regex filters to search by.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionaryEntry">
            <summary>
            Stores information about a dictionary entry.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.#ctor(System.String[],System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Creates a new RantDictionaryEntry object from the specified data.
            </summary>
            <param name="terms">The terms in the entry.</param>
            <param name="classes">The classes associated with the entry.</param>
            <param name="weight">The weight of the entry.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.#ctor(Rant.Vocabulary.RantDictionaryTerm[],System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Creates a new RantDictionaryEntry object from the specified data.
            </summary>
            <param name="terms">The terms in the entry.</param>
            <param name="classes">The classes associated with the entry.</param>
            <param name="weight">The weight of the entry.</param>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.Item(System.Int32)">
            <summary>
            Gets the value for the specified term index in the entry. If the index is out of range, [Missing Term] will be returned.
            </summary>
            <param name="index">The index of the term whose value to request.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.Terms">
            <summary>
            The terms in the entry.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetClasses">
            <summary>
            Returns a collection of classes assigned to the current entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetOptionalClasses">
            <summary>
            Returns a collection of the optional classes assigned to the current entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.AddClass(System.String,System.Boolean)">
            <summary>
            Adds the specified class to the current entry.
            </summary>
            <param name="className">The name of the class.</param>
            <param name="optional">Specifies whether the class is optional in carrier associations.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.RemoveClass(System.String)">
            <summary>
            Removes the class with the specified name from the current entry.
            </summary>
            <param name="className">The name of the class to remove.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.ContainsClass(System.String)">
            <summary>
            Returns a boolean valie indicating whether the current entry contains the specified class.
            </summary>
            <param name="className">The class to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.GetRequiredClasses">
            <summary>
            Returns a collection of required (non-optional) classes assigned to the current entry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryEntry.Weight">
            <summary>
            Gets the weight value of the entry.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryEntry.ToString">
            <summary>
            Returns a string representation of the current RantDictionaryEntry instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionary">
            <summary>
            Represents a Rant dictionary.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.#ctor">
            <summary>
            Creates a new RantDictionary object that contains no tables.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.#ctor(System.Collections.Generic.IEnumerable{Rant.Vocabulary.RantDictionaryTable},Rant.Vocabulary.TableMergeBehavior)">
            <summary>
            Creates a new RantDictionary object from the specified dictionary collection.
            </summary>
            <param name="tables">The tables to store in the dictionary.</param>
            <param name="mergeBehavior">The merging strategy to employ.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.IncludeHiddenClass(System.String)">
            <summary>
            Exposes a hidden class to query results.
            </summary>
            <param name="hiddenClassName">The name of the hidden class to expose.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.ExcludeHiddenClass(System.String)">
            <summary>
            Unexposes a hidden class from query results.
            </summary>
            <param name="hiddenClassName">The name of the hidden class to unexpose.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionary.IncludedHiddenClasses">
            <summary>
            Gets all currently exposed hidden classes.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.AddTable(Rant.Vocabulary.RantDictionaryTable,Rant.Vocabulary.TableMergeBehavior)">
            <summary>
            Adds a new RantDictionaryTable object to the collection.
            </summary>
            <param name="table"></param>
            <param name="mergeBehavior">The merging strategy to employ.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.GetTables">
            <summary>
            Enumerates the tables contained in the current RantDictionary instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.FromDirectory(System.String,Rant.Vocabulary.TableMergeBehavior)">
            <summary>
            Loads all dictionary (.dic) files from the specified directory and returns a RantDictionary object that contains the loaded data.
            </summary>
            <param name="directory">The directory from which to load dictionaries.</param>
            <param name="mergeBehavior">The merging strategy to employ.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.FromMultiDirectory(System.String[])">
            <summary>
            Loads all dictionary (.dic) files from the specified directories and returns a RantDictionary object that contains the loaded data.
            </summary>
            <param name="directories">The directories from which to load dictionaries.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.FromMultiDirectory(System.String[],Rant.Vocabulary.TableMergeBehavior)">
            <summary>
            Loads all dictionary (.dic) files from the specified directories and returns a RantDictionary object that contains the loaded data.
            </summary>
            <param name="directories">The directories from which to load dictionaries.</param>
            <param name="mergeBehavior">The merging strategy to employ.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionary.Query(Rant.RNG,Rant.Vocabulary.Query,Rant.Vocabulary.QueryState)">
            <summary>
            Queries the RantDictionary according to the specified criteria and returns a random match.
            </summary>
            <param name="rng">The random number generator to randomize the match with.</param>
            <param name="query">The search criteria to use.</param>
            <param name="syncState">The state object to use for carrier synchronization.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.Vocabulary.RantDictionaryTerm">
            <summary>
            Represents a Rant dictionary term. A dictionary entry will contain one term for every subtype.
            </summary>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTerm.#ctor(System.String)">
            <summary>
            Creates a new dictionary term with the specified value.
            </summary>
            <param name="value">The value of the term.</param>
        </member>
        <member name="M:Rant.Vocabulary.RantDictionaryTerm.#ctor(System.String,System.String)">
            <summary>
            Creates a new dictionary term with the specified value and pronunciation.
            </summary>
            <param name="value">The value of the term.</param>
            <param name="pronunciation">The pronunciation of the term.</param>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.Value">
            <summary>
            The value of the term.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.Pronunciation">
            <summary>
            The pronunciation of the term.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.PronunciationParts">
            <summary>
            An array containing the individual elements of the pronunciation string. Used by the rhyming system.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.Syllables">
            <summary>
            An array containing the individual syllables of the pronunciation string.
            </summary>
        </member>
        <member name="P:Rant.Vocabulary.RantDictionaryTerm.SyllableCount">
            <summary>
            The number of syllables in the pronunciation string.
            </summary>
        </member>
        <member name="T:Rant.Vocabulary.TableMergeBehavior">
            <summary>
            Defines merging behaviors for Rant dictionary tables.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.TableMergeBehavior.Naive">
            <summary>
            Combine all entries, don't remove duplicates.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.TableMergeBehavior.RemoveFirstTermDuplicates">
            <summary>
            Remove entries whose first term matches another entry.
            </summary>
        </member>
        <member name="F:Rant.Vocabulary.TableMergeBehavior.RemoveEntryDuplicates">
            <summary>
            Remove entries whose terms match another entry.
            </summary>
        </member>
        <member name="T:Rant.RantEngine">
            <summary>
            The central class of the Rant engine that allows the execution of patterns.
            </summary>
        </member>
        <member name="P:Rant.RantEngine.MaxStackSize">
            <summary>
            Gets or sets the maximum stack size allowed for a pattern.
            </summary>
        </member>
        <member name="M:Rant.RantEngine.GetPattern(System.String)">
            <summary>
            Returns a pattern with the specified name from the engine's cache. If the pattern doesn't exist, it is loaded from file.
            </summary>
            <param name="name">The name or path of the pattern to retrieve.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RantEngine.Item(System.String)">
            <summary>
            Accesses global variables.
            </summary>
            <param name="name">The name of the variable to access.</param>
            <returns></returns>
        </member>
        <member name="F:Rant.RantEngine.Flags">
            <summary>
            The currently set flags.
            </summary>
        </member>
        <member name="F:Rant.RantEngine.Format">
            <summary>
            The current formatting settings for the engine.
            </summary>
        </member>
        <member name="P:Rant.RantEngine.Dictionary">
            <summary>
            The vocabulary associated with this instance.
            </summary>
        </member>
        <member name="M:Rant.RantEngine.#ctor">
            <summary>
            Creates a new RantEngine object without a dictionary.
            </summary>
        </member>
        <member name="M:Rant.RantEngine.#ctor(System.String)">
            <summary>
            Creates a new RantEngine object that loads vocabulary from the specified path.
            </summary>
            <param name="dictionaryPath">The path to the dictionary files to load.</param>
        </member>
        <member name="M:Rant.RantEngine.#ctor(Rant.Vocabulary.RantDictionary)">
            <summary>
            Creates a new RantEngine object with the specified vocabulary.
            </summary>
            <param name="dictionary">The vocabulary to load in this instance.</param>
        </member>
        <member name="M:Rant.RantEngine.PatternExists(System.String)">
            <summary>
            Returns a boolean value indicating whether a pattern by the specified name has been loaded from a package.
            </summary>
            <param name="patternName">The name of the pattern to check.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.LoadPackage(Rant.RantPackage,Rant.Vocabulary.TableMergeBehavior)">
            <summary>
            Loads the specified package into the engine.
            </summary>
            <param name="package">The package to load.</param>
            <param name="mergeBehavior">The table merging strategy to employ.</param>
        </member>
        <member name="M:Rant.RantEngine.LoadPackage(System.String,Rant.Vocabulary.TableMergeBehavior)">
            <summary>
            Loads the package at the specified file path into the engine.
            </summary>
            <param name="path">The path to the package to load.</param>
            <param name="mergeBehavior">The table merging strategy to employ.</param>
        </member>
        <member name="M:Rant.RantEngine.Do(System.String,System.Int32,System.Double)">
            <summary>
            Compiles the specified string into a pattern, executes it, and returns the resulting output.
            </summary>
            <param name="input">The input string to execute.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoFile(System.String,System.Int32,System.Double)">
            <summary>
            Loads the file located at the specified path and executes it, returning the resulting output.
            </summary>
            <param name="path">The path to the file to execute.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(System.String,System.Int64,System.Int32,System.Double)">
            <summary>
            Compiles the specified string into a pattern, executes it using a custom seed, and returns the resulting output.
            </summary>
            <param name="input">The input string to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoFile(System.String,System.Int64,System.Int32,System.Double)">
            <summary>
            Loads the file located at the specified path and executes it using a custom seed, returning the resulting output.
            </summary>
            <param name="path">The path to the file to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(System.String,Rant.RNG,System.Int32,System.Double)">
            <summary>
            Compiles the specified string into a pattern, executes it using a custom RNG, and returns the resulting output.
            </summary>
            <param name="input">The input string to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoFile(System.String,Rant.RNG,System.Int32,System.Double)">
            <summary>
            Loads the file located at the specified path and executes it using a custom seed, returning the resulting output.
            </summary>
            <param name="path">The path to the file to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(Rant.RantPattern,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern and returns the resulting output.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(Rant.RantPattern,System.Int64,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern using a custom seed and returns the resulting output.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.Do(Rant.RantPattern,Rant.RNG,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern using a custom random number generator and returns the resulting output.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(Rant.RantPattern,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(Rant.RantPattern,System.Int64,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The patten to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(Rant.RantPattern,Rant.RNG,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattero to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(System.String,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(System.String,System.Int64,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoSerial(System.String,Rant.RNG,System.Int32,System.Double)">
            <summary>
            Executes the specified pattern and returns a series of outputs.
            </summary>
            <param name="input">The pattern to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoPackaged(System.String,System.Int32,System.Double)">
            <summary>
            Executes a pattern that has been loaded from a package and returns the resulting output.
            </summary>
            <param name="patternName">The name of the pattern to execute.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoPackaged(System.String,System.Int64,System.Int32,System.Double)">
            <summary>
            Executes a pattern that has been loaded from a package and returns the resulting output.
            </summary>
            <param name="patternName">The name of the pattern to execute.</param>
            <param name="seed">The seed to generate output with.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RantEngine.DoPackaged(System.String,Rant.RNG,System.Int32,System.Double)">
            <summary>
            Executes a pattern that has been loaded from a package using a custom random number generator and returns the resulting output.
            </summary>
            <param name="patternName">The name of the pattern to execute.</param>
            <param name="rng">The random number generator to use when generating output.</param>
            <param name="charLimit">The maximum number of characters that can be printed. An exception will be thrown if the limit is exceeded. Set to zero or below for unlimited characters.</param>
            <param name="timeout">The maximum number of seconds that the pattern will execute for.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.RantRuntimeException">
            <summary>
            Represents a runtime error raised by the Rant engine.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Line">
            <summary>
            The line on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Column">
            <summary>
            The column on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Index">
            <summary>
            The character index on which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Length">
            <summary>
            The length of the substring in which the error occurred.
            </summary>
        </member>
        <member name="P:Rant.RantRuntimeException.Code">
            <summary>
            The source of the error.
            </summary>
        </member>
        <member name="T:Rant.RNG">
            <summary>
            Represents a non-linear random number generator.
            </summary>
        </member>
        <member name="P:Rant.RNG.BaseSeed">
            <summary>
            The root seed.
            </summary>
        </member>
        <member name="P:Rant.RNG.Seed">
            <summary>
            The seed of the top branch.
            </summary>
        </member>
        <member name="P:Rant.RNG.Generation">
            <summary>
            The current generation.
            </summary>
        </member>
        <member name="M:Rant.RNG.#ctor(System.Int64)">
            <summary>
            Creates a new RNG instance with the specified seed.
            </summary>
            <param name="seed">The seed for the generator.</param>
        </member>
        <member name="M:Rant.RNG.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a new RNG instance with the specified seed and generation.
            </summary>
            <param name="seed">The seed for the generator.</param>
            <param name="generation">The generation to start at.</param>
        </member>
        <member name="M:Rant.RNG.#ctor">
            <summary>
            Creates a new RNG instance seeded with the system tick count.
            </summary>
        </member>
        <member name="M:Rant.RNG.GetRaw(System.Int64,System.Int64)">
            <summary>
            Calculates the raw 64-bit value for a given seed/generation pair.
            </summary>
            <param name="s">The seed.</param>
            <param name="g">The generation.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RNG.Item(System.Int32)">
            <summary>
            Calculates the raw 64-bit value for a given generation.
            </summary>
            <param name="g">The generation.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextRaw">
            <summary>
            Calculates the raw 64-bit value for the next generation, and increases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PrevRaw">
            <summary>
            Calculates the raw 64-bit value for the previous generation, and decreases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Reset">
            <summary>
            Sets the current generation to zero.
            </summary>
        </member>
        <member name="M:Rant.RNG.Reset(System.Int64)">
            <summary>
            Sets the seed to the specified value and the current generation to zero.
            </summary>
            <param name="newSeed">The new seed to apply to the generator.</param>
        </member>
        <member name="M:Rant.RNG.Branch(System.Int64)">
            <summary>
            Creates a new branch based off the current seed and the specified seed.
            </summary>
            <param name="seed">The seed to create the branch with.</param>
            <returns></returns>
        </member>
        <member name="P:Rant.RNG.Depth">
            <summary>
            The current branching depth of the generator.
            </summary>
        </member>
        <member name="M:Rant.RNG.Merge">
            <summary>
            Removes the topmost branch and resumes generation on the next one down.
            </summary>
        </member>
        <member name="M:Rant.RNG.Peek">
            <summary>
            Calculates a 32-bit, non-negative integer for the current generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PeekAt(System.Int64)">
            <summary>
            Calculates the 32-bitnon-negative integer for the specified generation.
            </summary>
            <param name="generation">The generation to peek at.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextDouble">
            <summary>
            Returns a double-precision floating point number between 0 and 1, and advances the generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextDouble(System.Double)">
            <summary>
            Returns a double-precision floating point number between 0 and the specified maximum value, and advances the generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a double-precision floating point number between the specified minimum and maximum values, and advances the generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.NextBoolean">
            <summary>
            Returns a random boolean value and advances the generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Next">
            <summary>
            Calculates a 32-bit, non-negative integer from the next generation and increases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Prev">
            <summary>
            Calculates a 32-bit, non-negative integer from the previous generation and decreases the current generation by 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Next(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the current generation and increases the current generation by 1.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Prev(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound from the previous generation and decreases the current generation by 1.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Peek(System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the current generation.
            </summary>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PeekAt(System.Int64,System.Int32)">
            <summary>
            Calculates a 32-bit integer between 0 and a specified upper bound for the specified generation.
            </summary>
            <param name="generation">The generation whose value to calculate.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Next(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the current generation, and increases the current generation by 1.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Prev(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the previous generation, and decreases the current generation by 1.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.Peek(System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the current generation.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Rant.RNG.PeekAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a 32-bit integer between the specified minimum and maximum values for the specified generation.
            </summary>
            <param name="min">The inclusive minimum value.</param>
            <param name="max">The exclusive maximum value.</param>
            <param name="generation">The generation whose value to calculate.</param>
            <returns></returns>
        </member>
        <member name="T:Rant.RantPattern">
            <summary>
            Represents a compiled pattern that can be executed by the engine. It is recommended to use this class when running the same pattern multiple times.
            </summary>
        </member>
        <member name="P:Rant.RantPattern.Name">
            <summary>
            Gets or sets the name of the source code.
            </summary>
        </member>
        <member name="P:Rant.RantPattern.Type">
            <summary>
            Describes the origin of the pattern.
            </summary>
        </member>
        <member name="P:Rant.RantPattern.Code">
            <summary>
            The code contained in the pattern.
            </summary>
        </member>
        <member name="M:Rant.RantPattern.FromString(System.String)">
            <summary>
            Compiles a pattern from the specified string.
            </summary>
            <param name="code">The code to compile.</param>
            <exception cref="T:Rant.RantCompilerException">Thrown if a syntax error is encountered.</exception>
            <returns></returns>
        </member>
        <member name="M:Rant.RantPattern.FromString(System.String,System.String)">
            <summary>
            Compiles a pattern from a string with the specified name.
            </summary>
            <param name="name">The name to give the source.</param>
            <param name="code">The code to compile.</param>
            <exception cref="T:Rant.RantCompilerException">Thrown if a syntax error is encountered.</exception>
            <returns></returns>
        </member>
        <member name="M:Rant.RantPattern.FromFile(System.String)">
            <summary>
            Loads the file located at the specified path and compiles a pattern from its contents.
            </summary>
            <param name="path">The path to the file to load.</param>
            <exception cref="T:Rant.RantCompilerException">Thrown if a syntax error is encountered.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file cannot be found.</exception>
            <returns></returns>
        </member>
        <member name="M:Rant.RantPattern.ToString">
            <summary>
            Returns a string describing the pattern.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rant.RantPatternSource">
            <summary>
            Indicates the manner in which a referenced code source was created.
            </summary>
        </member>
        <member name="F:Rant.RantPatternSource.File">
            <summary>
            Source was loaded from a file.
            </summary>
        </member>
        <member name="F:Rant.RantPatternSource.String">
            <summary>
            Source was loaded from a string.
            </summary>
        </member>
        <member name="F:Rant.RantPatternSource.Metapattern">
            <summary>
            Source was generated from a metapattern.
            </summary>
        </member>
        <member name="F:Rant.RantPatternSource.SelfGenerated">
            <summary>
            Source was generated from an interpreted subroutine definition.
            </summary>
        </member>
    </members>
</doc>
